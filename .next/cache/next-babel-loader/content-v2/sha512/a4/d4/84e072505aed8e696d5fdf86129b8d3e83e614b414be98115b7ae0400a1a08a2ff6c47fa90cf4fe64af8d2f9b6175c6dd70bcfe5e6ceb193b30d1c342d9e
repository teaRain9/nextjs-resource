{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/adel/Desktop/myProjects/nextjs-resource/pages/[meetupId]/index.js\";\nimport { Fragment } from \"react\";\nimport MeetupDetail from \"../../components/meetups/MeetupDetail\";\nimport { MongoClient } from \"mongodb\";\nexport default function DetailPage(props) {\n  return /*#__PURE__*/_jsxDEV(MeetupDetail, {\n    image: props.meetupData.image,\n    title: props.meetupData.title,\n    address: props.meetupData.address,\n    description: props.meetupData.description\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 7,\n    columnNumber: 5\n  }, this);\n}\nconst client = await MongoClient.connect(\"mongodb+srv://adel:c3hqCAq3HVkF1JWX@cluster0.v3imuty.mongodb.net/?retryWrites=true&w=majority\");\nconst db = client.db();\nconst meetupsCollection = db.collection(\"meetups\");\nconst meetups = await meetupsCollection.find({}, {\n  _id: 1\n}).toArray();\nclient.close();\nexport async function getStaticPaths() {\n  return {\n    fallback: false,\n    paths: meetups.map(meetup => ({\n      params: {\n        meetupId: meetup._id.toString()\n      }\n    }))\n  };\n}\nexport async function getStaticProps(context) {\n  //fetch the data for a single meetup\n  const meetupId = context.params.meetupId;\n  return {\n    props: {\n      meetupData: {\n        image: \"https://upload.wikimedia.org/wikipedia/commons/d/d3/Stadtbild_M%C3%BCnchen.jpg\",\n        id: meetupId,\n        title: \"A First Meetup\",\n        address: \"Some Street 5, Some City\",\n        description: \"The meetup description\"\n      }\n    },\n    revalidate: 1\n  };\n}","map":{"version":3,"sources":["/Users/adel/Desktop/myProjects/nextjs-resource/pages/[meetupId]/index.js"],"names":["Fragment","MeetupDetail","MongoClient","DetailPage","props","meetupData","image","title","address","description","client","connect","db","meetupsCollection","collection","meetups","find","_id","toArray","close","getStaticPaths","fallback","paths","map","meetup","params","meetupId","toString","getStaticProps","context","id","revalidate"],"mappings":";;AAAA,SAASA,QAAT,QAAyB,OAAzB;AACA,OAAOC,YAAP,MAAyB,uCAAzB;AACA,SAASC,WAAT,QAA4B,SAA5B;AAEA,eAAe,SAASC,UAAT,CAAoBC,KAApB,EAA2B;AACxC,sBACE,QAAC,YAAD;AACE,IAAA,KAAK,EAAEA,KAAK,CAACC,UAAN,CAAiBC,KAD1B;AAEE,IAAA,KAAK,EAAEF,KAAK,CAACC,UAAN,CAAiBE,KAF1B;AAGE,IAAA,OAAO,EAAEH,KAAK,CAACC,UAAN,CAAiBG,OAH5B;AAIE,IAAA,WAAW,EAAEJ,KAAK,CAACC,UAAN,CAAiBI;AAJhC;AAAA;AAAA;AAAA;AAAA,UADF;AAQD;AAED,MAAMC,MAAM,GAAG,MAAMR,WAAW,CAACS,OAAZ,CACnB,+FADmB,CAArB;AAGA,MAAMC,EAAE,GAAGF,MAAM,CAACE,EAAP,EAAX;AACA,MAAMC,iBAAiB,GAAGD,EAAE,CAACE,UAAH,CAAc,SAAd,CAA1B;AAEA,MAAMC,OAAO,GAAG,MAAMF,iBAAiB,CAACG,IAAlB,CAAuB,EAAvB,EAA2B;AAAEC,EAAAA,GAAG,EAAE;AAAP,CAA3B,EAAuCC,OAAvC,EAAtB;AACAR,MAAM,CAACS,KAAP;AAEA,OAAO,eAAeC,cAAf,GAAgC;AACrC,SAAO;AACLC,IAAAA,QAAQ,EAAE,KADL;AAELC,IAAAA,KAAK,EAAEP,OAAO,CAACQ,GAAR,CAAaC,MAAD,KAAa;AAC9BC,MAAAA,MAAM,EAAE;AAAEC,QAAAA,QAAQ,EAAEF,MAAM,CAACP,GAAP,CAAWU,QAAX;AAAZ;AADsB,KAAb,CAAZ;AAFF,GAAP;AAMD;AAED,OAAO,eAAeC,cAAf,CAA8BC,OAA9B,EAAuC;AAC5C;AAEA,QAAMH,QAAQ,GAAGG,OAAO,CAACJ,MAAR,CAAeC,QAAhC;AAEA,SAAO;AACLtB,IAAAA,KAAK,EAAE;AACLC,MAAAA,UAAU,EAAE;AACVC,QAAAA,KAAK,EACH,gFAFQ;AAGVwB,QAAAA,EAAE,EAAEJ,QAHM;AAIVnB,QAAAA,KAAK,EAAE,gBAJG;AAKVC,QAAAA,OAAO,EAAE,0BALC;AAMVC,QAAAA,WAAW,EAAE;AANH;AADP,KADF;AAWLsB,IAAAA,UAAU,EAAE;AAXP,GAAP;AAaD","sourcesContent":["import { Fragment } from \"react\";\nimport MeetupDetail from \"../../components/meetups/MeetupDetail\";\nimport { MongoClient } from \"mongodb\";\n\nexport default function DetailPage(props) {\n  return (\n    <MeetupDetail\n      image={props.meetupData.image}\n      title={props.meetupData.title}\n      address={props.meetupData.address}\n      description={props.meetupData.description}\n    />\n  );\n}\n\nconst client = await MongoClient.connect(\n  \"mongodb+srv://adel:c3hqCAq3HVkF1JWX@cluster0.v3imuty.mongodb.net/?retryWrites=true&w=majority\"\n);\nconst db = client.db();\nconst meetupsCollection = db.collection(\"meetups\");\n\nconst meetups = await meetupsCollection.find({}, { _id: 1 }).toArray();\nclient.close();\n\nexport async function getStaticPaths() {\n  return {\n    fallback: false,\n    paths: meetups.map((meetup) => ({\n      params: { meetupId: meetup._id.toString() },\n    })),\n  };\n}\n\nexport async function getStaticProps(context) {\n  //fetch the data for a single meetup\n\n  const meetupId = context.params.meetupId;\n\n  return {\n    props: {\n      meetupData: {\n        image:\n          \"https://upload.wikimedia.org/wikipedia/commons/d/d3/Stadtbild_M%C3%BCnchen.jpg\",\n        id: meetupId,\n        title: \"A First Meetup\",\n        address: \"Some Street 5, Some City\",\n        description: \"The meetup description\",\n      },\n    },\n    revalidate: 1,\n  };\n}\n"]},"metadata":{},"sourceType":"module"}